.\" @(#)getpar.3	56.1 10/25/93
.TH GETPAR 3 
.SH NAME
setpar, getpar, mstpar, endpar \- retrieve command-line arguments
.SH SYNOPSIS 
#include "libget.h"
.PP
.B void setpar(int argc, char **argv)
.PP
.B int getpar(char *name, char *type,
.B void *pointer)
.br
.B (char/int/float/double) *pointer
.PP
.B int mstpar(char *name, char *type,
.B void *pointer)
.br
.B (char/int/float/double) *pointer
.PP
.B void endpar(void)
.PP
.B char *getspar(char *name, char *defvalue)
.PP
.B char *mstspar(char *name)
.PP
.B int getbpar(char *name, int defvalue)
.PP
.B int getdpar(char *name, int defvalue)
.PP
.B float getfpar(char *name, float defvalue)
.PP
.B double getffpar(char *name, double defvalue)
.PP
The declaration for the argument
.B pointer
depends on
.B type.
.SH DESCRIPTION
The
.I getpar
routines provide a simple method to parse program arguments from
the command line, and from files.
Their use illustrated in the following example:
.IP "" 10
main(int ac, char **av)
.br
   {
.br
	/* specify parameters, some with default values */
.br
	static int nx =10;
.br
	static char title[40] = "No title given";
.br
	static float dx = 0.01;
.br
	static char input[40];
.br
	static float x[8];
.br
	static int boo = 1;	/* boolean, true */

.br
	setpar(ac,av);			 /* initialize getpar */
.br
	getpar("nx","d",&nx);
.br
	getpar("dx","f",&dx);
.br
	getpar("title","s",title);
.br
	mstpar("input","s",input); /* must have this parameter */
.br
	getpar("boo","b",&boo);
.br
	getpar("x","vf[8]",x);
.br
	endpar();		 /* deactivate getpar */
.br

.br
	/* rest of program */
.br
   }
.PP
The routine
.I setpar
initializes the package.
Its arguments are the same as those to main itself.
It is an error to not call
.I setpar
before any other getpar calls.
The
.I getpar
routines are deactivated with a call to
.I endpar.
This routine releases memory, and allows the
.B STOP
option mentioned below to happen.
.PP
The individual parameters are obtained with calls to
.I getpar
and
.I mstpar.
.I Mstpar
(must par) is identical to
.I getpar
except that it terminates the program with an error message
if the particular parameter is not specified.
The following description of
.I getpar
also applies to
.I mstpar.
.PP
.I Getpar
has three parameters.
The first is a character string which specifies the external name
of the parameter.
It can be (practically speaking) of any length.
The second parameter is a character string which specifies the type
of variable the parameter is.
Currently the following types are understood:
.IP "" 15
"d"	integer
.br
"f"	float
.br
"F"	double
.br
"s"	character string
.br
"b"	boolean (integer)
.br
"vd"	integer vector
.br
"vf"	float vector
.br
"vF"	double vector
.PP
The \fItype\fR parameter can be used to indicate the maximum number
of elements allowable in vectors.
For example \fItype="vf[4]"\fR or \fItype="vf(4)"\fR would
cause \fIgetpar\fR to modify no more than 4 elements of the vector,
regardless of how many elements the user specifies.
If no limit is specified, a limit of 10 is quietly enforced.
.PP
The last parameter is a pointer to the type of variable indicated by
.I type.
.I Getpar
does not modify this variable if no occurrence of the parameter is found.
Hence, a default value can be assigned before the call to
.I getpar.
.I Getpar
returns 1 the parameter was found, and 0 if not.
For vectors,
.I getpar
returns the number of elements found.
.PP
.I Getspar 
and 
.I mstspar 
work similarly to 
.I getpar 
and 
.I mstpar 
for string parameters, except that the returned value is a pointer to a string
that contains the parameter value.  The input parameter value is
copied to a new string using strdup(3).
In 
.I getspar
the input arguments include the
parameter name and a default value, which can be a NULL string.  The 
NULL pointer is returned if the default value is a NULL pointer and
no parameter was found.  
.I Mstspar
requires that the parameter be found, hence no defaults are permitted.
.PP
.I Getbpar, getdpar, getfpar 
and 
.I getffpar 
work similarly to 
.I getpar 
for 
boolean, integer, float and double parameters, respectively except that 
the returned value contains the default value and is of type boolean, 
integer, float or double as requested.
The input arguments for these functions include the
parameter name and a default value.
.SH PARAMETER FORMAT
.PP
The parameters on the command line can occur in any order,
and any number of times.
In the case of multiple specifications, the last one is used.
Any parameters that are not requested by
.I getpar
or
.I mstpar
are ignored.
An example of specifying parameters for the above program is:
.IP "" 10
a.out dx=0.123  nx=300 title="sample title"  dy=0.456 noboo x=1.0,4x2.0,2x5.12
.PP
Each specification is of the form
.I name=value.
No embedded blanks are allowed on either side of the equals ("=") sign.
Character strings with blanks or tabs are delimited with single (') or
double (") quotes.
The only exceptions to the
.I name=value
rule are boolean variables which are specified as
.I name
or
.I noname
to indicate true or false.
Boolean variables may also be specified as integers with the form
.I name=(int).
In the above example, true values for
.I boo
are specified as either
.I boo
or
.I boo=1,
and false values as either
.I noboo
or
.I boo=0.
If
.I boo=100
is given then the returned value is
.I 100.
The value for vector is given as a list separated by commas (,).
No embedded blanks are allowed in the list.
Repetition factors (2x and 4x in the above example) can be used to
specify repeated values.
.PP
Several additional features are also available.
At any point on the command line, the parameter
.I par=filename
can be given.
This will cause
.I getpar
to look in the file
.I filename
for additional parameters.
Several
.I par
arguments can be given on the command line.
The search order is left to right.
Consequently, any parameters given after the
.I par=filename
will override their values given in
.I filename.
Also, the environment (if allowed, see NOENV option below) is searched first.
Thus parameters on the command line and in par files override parameters
set in the environment.
The format of the parameters in the par file follow the same rules as the
command line.
Several specifications separated by while space, can occur on a given
line, and their can be any number of lines.
A '#' symbol in the position where a name would normally occur,
indicates that the rest of the line is a comment, and is consequently
ignored.
The specification
.I par=filename
is also allow in the file, however recursions are limited in depth
(current limit is 4).
.PP
As a concession to the traditional switch passing method, a parameter
of the form
.IP "" 10
a.out -abc
.PP
is available to the calling program as a character string with the call
.IP "" 10
getpar("SWITCH","s",&sw);
.PP
where in the example above, the string
.I sw
would be
.I abc.
.PP
Parameters in the shell environment can be set (unset) with the
C-shell commands:
.IP "" 10
setenv name value
.IP "" 10
unsetenv name
.PP
The parameters in the environment can be printed with the command
.IP "" 10
printenv
.PP
Five additional parameters allow for input checking, and program
interrogation.
.TP 10
.B STOP
The call to
.I endpar
will terminate the program if this parameter is given.
.TP 10
.B LIST
Each call to
.I getpar
or
.I mstpar
will cause the name, type, and value of the variable to be
listed on
.I stderr.
If
.I LIST=filename
is given, the listing is put in the file
.I filename.
This option is useful for interrogating a program as to what it wants
for input.
.TP 10
.B INPUT
.I Setpar
will list all input parameters that are found.
This option is useful for debugging input data, and determining
where a particular parameter is coming from in multiple
.I par
specifications.
If
.I INPUT=filename
is given, the listing is put in the file
.I filename.
.TP 10
.B NOENV
will disallow any parameters to be obtained from the environment.
It may occur on the command line, in a par file, or in the environment
itself.
.TP 10
.B VERBOSE
will cause
.I getpar/mstpar
to print the name of the parameter before starting to search for it.
This provides a quick method of determining which subroutine call is
at fault, when a program dies in the getpar package.
.PP 
Limited parameter substitution is supported.  An example of the syntax is
.TP 10
.I dir=/usr/local/lib
.TP 10
.I file=filename
.TP 10
.I path=$(dir)/$(path)
Parameter substitution occurs during parameter input.  Whenever a
parameter to be substituted is encountered during input, the list of
previously defined parameters (including the environment) are searched
for the value and immediately substituted.  Thus, for the purpose of
substitution, the ordering of parameter input is important.
Substitution may be suppressed by escaping the "$" with a backslash (
\\ ).  If a parameter value contains the name of an undefined parameter,
it is simply removed from the parameter value.
.SH AVAILABILITY
The
.I getpar
routines are in the library
.I /opt/util/lib/libget.a
and may be loaded with
.I -L/opt/util/lib -lget
.SH "SEE ALSO"
getarg(3)
.SH WARNINGS
Be careful that
.I type
is correctly specified, when dealing with floats and doubles.
If a double pointer is used with \fItype="f"\fR,
The lowest 32 bits of the mantissa will not be set correctly.
If a float pointer and \fItype="F"\fR
are used, the next element in memory will be clobbered.
If the last combination is used in vector mode, you will get garbage back.
.PP
If a program appears to be behaving differently for identical input
parameters, make sure that some defaulted parameters are not sneaking
in via the environment.
The NOENV option may be of some use in this case.
If you believe back door parameters are a bad practice, then set NOENV in
your login shell.
.SH DIAGNOSTICS
The routines produce error messages of the type:
.br
.br
****** ERROR program[getpar]: ******
.br
	error message
.br
.br
Hopefully the error message is diagnostic of the trouble.
If you are debugging a program try the VERBOSE option to see which
call generated the problem.
.SH BUGS
Errors in calls to
.I mstpar
are often reported as calls to
.I getpar.
.PP
Parameter substitution might be more useful (but the program would
be more complex) if the ordering requirements were relaxed.
.SH AUTHOR
Originally Robert W. Clayton, Seismological Laboratory, Caltech,
Pasadena, CA 91125.  Now Blair Zajac has updated some of this stuff.
